"""
Ki≈üisel Telegram Asistan Botu v5.3 - Zaman Ayrƒ±≈ütƒ±rma D√ºzeltildi
"""
import os
import logging
import base64
import json
import pytz
import re
from datetime import datetime, timedelta
from pathlib import Path
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from google.oauth2 import service_account
from googleapiclient.discovery import build
import google.generativeai as genai

# Logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- AYARLAR ---
TOKEN = os.environ.get("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
GOOGLE_CALENDAR_ID = os.environ.get("GOOGLE_CALENDAR_ID")
GOOGLE_CREDENTIALS_BASE64 = os.environ.get("GOOGLE_CREDENTIALS_BASE64")

if not all([TOKEN, GEMINI_API_KEY, GOOGLE_CALENDAR_ID, GOOGLE_CREDENTIALS_BASE64]):
    raise ValueError("Gerekli t√ºm ortam deƒüi≈ükenleri ayarlanmalƒ±dƒ±r!")

# --- GOOGLE AYARLARI ---
try:
    creds_json_str = base64.b64decode(GOOGLE_CREDENTIALS_BASE64).decode('utf-8')
    creds_json = json.loads(creds_json_str)
    SCOPES = ['https://www.googleapis.com/auth/calendar']
    GOOGLE_CREDS = service_account.Credentials.from_service_account_info(creds_json, scopes=SCOPES)
    calendar_service = build('calendar', 'v3', credentials=GOOGLE_CREDS)
except Exception as e:
    logger.error(f"Google Credentials y√ºklenemedi: {e}")
    calendar_service = None

# --- GEMINI AYARLARI ---
genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-1.5-flash-latest')
chat_sessions = {}

# --- ZAMAN AYRI≈ûTIRMA FONKSƒ∞YONU ---
def parse_time_from_text(text):
    """
    Metinden zaman bilgisini √ßƒ±karƒ±r ve ƒ∞stanbul saat dilimine g√∂re datetime d√∂nd√ºr√ºr
    """
    istanbul_tz = pytz.timezone('Europe/Istanbul')
    now = datetime.now(istanbul_tz)
    
    # Yaygƒ±n zaman ifadeleri i√ßin pattern'ler
    patterns = [
        # "yarƒ±n saat 11:00" veya "yarƒ±n 11:00"
        (r'yarƒ±n\s+(?:saat\s+)?(\d{1,2}):(\d{2})', lambda h, m: (now + timedelta(days=1)).replace(hour=int(h), minute=int(m), second=0, microsecond=0)),
        
        # "bug√ºn saat 11:00" veya "bug√ºn 11:00" 
        (r'bug√ºn\s+(?:saat\s+)?(\d{1,2}):(\d{2})', lambda h, m: now.replace(hour=int(h), minute=int(m), second=0, microsecond=0)),
        
        # "saat 11:00" (bug√ºn i√ßin)
        (r'(?:^|\s)saat\s+(\d{1,2}):(\d{2})', lambda h, m: now.replace(hour=int(h), minute=int(m), second=0, microsecond=0)),
        
        # "11:00" (sadece saat)
        (r'(?:^|\s)(\d{1,2}):(\d{2})(?:\s|$)', lambda h, m: now.replace(hour=int(h), minute=int(m), second=0, microsecond=0)),
        
        # "yarƒ±n 11'de" 
        (r'yarƒ±n\s+(\d{1,2})\'?(?:de|da)', lambda h: (now + timedelta(days=1)).replace(hour=int(h), minute=0, second=0, microsecond=0)),
        
        # "bug√ºn 11'de"
        (r'bug√ºn\s+(\d{1,2})\'?(?:de|da)', lambda h: now.replace(hour=int(h), minute=0, second=0, microsecond=0)),
        
        # "11'de" (bug√ºn i√ßin)
        (r'(?:^|\s)(\d{1,2})\'?(?:de|da)(?:\s|$)', lambda h: now.replace(hour=int(h), minute=0, second=0, microsecond=0)),
        
        # "1 saat sonra"
        (r'(\d+)\s+saat\s+sonra', lambda h: now + timedelta(hours=int(h))),
        
        # "30 dakika sonra"
        (r'(\d+)\s+dakika\s+sonra', lambda m: now + timedelta(minutes=int(m))),
        
        # "2 g√ºn sonra saat 15:00"
        (r'(\d+)\s+g√ºn\s+sonra\s+(?:saat\s+)?(\d{1,2}):(\d{2})', lambda d, h, m: (now + timedelta(days=int(d))).replace(hour=int(h), minute=int(m), second=0, microsecond=0)),
    ]
    
    for pattern, time_func in patterns:
        match = re.search(pattern, text.lower())
        if match:
            try:
                parsed_time = time_func(*match.groups())
                
                # Ge√ßmi≈üte kalmƒ±≈üsa (bug√ºn i√ßin) yarƒ±na al
                if parsed_time <= now and 'yarƒ±n' not in text.lower() and 'g√ºn sonra' not in text.lower():
                    parsed_time += timedelta(days=1)
                
                # Zaman dilimini ayarla
                if parsed_time.tzinfo is None:
                    parsed_time = istanbul_tz.localize(parsed_time)
                
                # Mesajdan zaman ifadesini √ßƒ±kar
                message = re.sub(pattern, '', text, flags=re.IGNORECASE).strip()
                message = re.sub(r'\s+', ' ', message)  # √áoklu bo≈üluklarƒ± tek bo≈üluk yap
                
                return parsed_time, message, match.group(0)
                
            except Exception as e:
                logger.error(f"Zaman ayrƒ±≈ütƒ±rma hatasƒ±: {e}")
                continue
    
    return None, text, None

# --- TELEGRAM FONKSƒ∞YONLARI ---
async def post_init(application: Application):
    await application.bot.set_my_commands([
        BotCommand("start", "Asistanƒ± ba≈ülatƒ±r"),
        BotCommand("hatirlat", "Google Takvime akƒ±llƒ± hatƒ±rlatƒ±cƒ± ekler"),
        BotCommand("takvim", "Google Takvimini a√ßar"),
        BotCommand("yeni_sohbet", "Yapay zeka sohbet ge√ßmi≈üini sƒ±fƒ±rlar"),
    ])

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ Merhaba! Ben Google Takvim ile entegre ki≈üisel asistanƒ±nƒ±m.\n\n"
        "Komutlar:\n"
        "/hatirlat yarƒ±n saat 11:00 proje toplantƒ±sƒ±\n"
        "/hatirlat bug√ºn 15:30 doktor randevusu\n"
        "/hatirlat 2 saat sonra alƒ±≈üveri≈ü\n"
        "/takvim - Takvimi a√ßar\n"
        "/yeni_sohbet - Sohbet ge√ßmi≈üini sƒ±fƒ±rlar"
    )

async def set_reminder_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "L√ºtfen hatƒ±rlatƒ±cƒ± i√ßin zaman ve mesaj belirtin.\n\n"
            "√ñrnekler:\n"
            "‚Ä¢ /hatirlat yarƒ±n saat 11:00 proje toplantƒ±sƒ±\n"
            "‚Ä¢ /hatirlat bug√ºn 15:30 doktor randevusu\n"
            "‚Ä¢ /hatirlat 2 saat sonra alƒ±≈üveri≈ü\n"
            "‚Ä¢ /hatirlat yarƒ±n 9'da egzersiz"
        )
        return

    full_text = " ".join(context.args)
    
    # Zaman ayrƒ±≈ütƒ±rma
    parsed_time, message, found_time_expr = parse_time_from_text(full_text)
    
    if not parsed_time:
        await update.message.reply_text(
            "‚ùå Zaman ifadesi bulunamadƒ±.\n\n"
            "Desteklenen formatlar:\n"
            "‚Ä¢ yarƒ±n saat 11:00\n"
            "‚Ä¢ bug√ºn 15:30\n"
            "‚Ä¢ 2 saat sonra\n"
            "‚Ä¢ yarƒ±n 9'da\n"
            "‚Ä¢ 30 dakika sonra"
        )
        return

    if not message or len(message.strip()) < 3:
        await update.message.reply_text(
            f"‚ùå Hatƒ±rlatƒ±cƒ± mesajƒ± bulunamadƒ±.\n"
            f"Zaman: {found_time_expr}\n"
            f"L√ºtfen neyi hatƒ±rlatacaƒüƒ±mƒ± da belirtin."
        )
        return

    # Google Calendar etkinliƒüi olu≈ütur
    event = {
        'summary': message,
        'start': {
            'dateTime': parsed_time.isoformat(),
            'timeZone': 'Europe/Istanbul'
        },
        'end': {
            'dateTime': (parsed_time + timedelta(minutes=30)).isoformat(),
            'timeZone': 'Europe/Istanbul'
        },
        'reminders': {
            'useDefault': False,
            'overrides': [
                {'method': 'popup', 'minutes': 10}
            ]
        },
    }

    try:
        if not calendar_service:
            await update.message.reply_text("‚ùå Google Calendar servis baƒülantƒ±sƒ± kurulamadƒ±.")
            return
            
        result = calendar_service.events().insert(calendarId=GOOGLE_CALENDAR_ID, body=event).execute()
        
        # T√ºrk√ße tarih formatƒ±
        formatted_time = parsed_time.strftime('%d %B %Y, %A, Saat %H:%M')
        
        # Ay isimlerini T√ºrk√ße'ye √ßevir
        months = {
            'January': 'Ocak', 'February': '≈ûubat', 'March': 'Mart',
            'April': 'Nisan', 'May': 'Mayƒ±s', 'June': 'Haziran',
            'July': 'Temmuz', 'August': 'Aƒüustos', 'September': 'Eyl√ºl',
            'October': 'Ekim', 'November': 'Kasƒ±m', 'December': 'Aralƒ±k'
        }
        
        days = {
            'Monday': 'Pazartesi', 'Tuesday': 'Salƒ±', 'Wednesday': '√áar≈üamba',
            'Thursday': 'Per≈üembe', 'Friday': 'Cuma', 'Saturday': 'Cumartesi',
            'Sunday': 'Pazar'
        }
        
        for eng, tr in months.items():
            formatted_time = formatted_time.replace(eng, tr)
        for eng, tr in days.items():
            formatted_time = formatted_time.replace(eng, tr)
        
        await update.message.reply_text(
            f"‚úÖ Google Takvime ba≈üarƒ±yla eklendi!\n\n"
            f"üìù Etkinlik: {message}\n"
            f"üìÖ Tarih: {formatted_time}\n"
            f"üîó Etkinlik ID: {result['id'][:8]}..."
        )
        
    except Exception as e:
        logger.error(f"Google Calendar API hatasƒ±: {e}")
        await update.message.reply_text(
            f"‚ùå Takvime etkinlik eklerken hata olu≈ütu:\n{str(e)[:100]}"
        )

async def calendar_link_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"üìÖ Asistan Takvimini a√ßmak i√ßin tƒ±klayƒ±n:\n"
        f"https://calendar.google.com/calendar/u/0?cid={GOOGLE_CALENDAR_ID}"
    )

async def new_chat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in chat_sessions:
        del chat_sessions[user_id]
    await update.message.reply_text("ü§ñ Sohbet ge√ßmi≈üi temizlendi. Yeni bir sohbete ba≈ülayabilirsiniz.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_text = update.message.text
    
    if user_id not in chat_sessions:
        chat_sessions[user_id] = gemini_model.start_chat()
    
    chat = chat_sessions[user_id]
    
    try:
        response = await chat.send_message_async(user_text)
        await update.message.reply_text(response.text)
    except Exception as e:
        logger.error(f"Gemini sohbet hatasƒ±: {e}")
        await update.message.reply_text("ü§ñ √úzg√ºn√ºm, ≈üu anda bir sorunla kar≈üƒ±la≈ütƒ±m. L√ºtfen tekrar deneyin.")

def main() -> None:
    application = Application.builder().token(TOKEN).post_init(post_init).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("hatirlat", set_reminder_command))
    application.add_handler(CommandHandler("takvim", calendar_link_command))
    application.add_handler(CommandHandler("yeni_sohbet", new_chat_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("Bot ba≈ülatƒ±ldƒ± - Zaman ayrƒ±≈ütƒ±rma d√ºzeltildi!")
    application.run_polling()

if __name__ == "__main__":
    main()