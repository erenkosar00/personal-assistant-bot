"""
KiÅŸisel Telegram Asistan Botu v3.1 - KararlÄ± SÃ¼rÃ¼m
"""
import os
import logging
import sqlite3
import pytz
import google.generativeai as genai
import dateparser
from datetime import datetime
from pathlib import Path
from telegram import Update, constants
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# Logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# --- AYARLAR ---
TOKEN = os.environ.get("TELEGRAM_TOKEN")
GEMINI_API_KEY = os.environ.get("GEMINI_API_KEY")
if not TOKEN: raise ValueError("TELEGRAM_TOKEN ayarlanmadÄ±!")
if not GEMINI_API_KEY: raise ValueError("GEMINI_API_KEY ayarlanmadÄ±!")

DB_PATH = Path("assistant.db")
TIMEZONE = pytz.timezone("Europe/Istanbul")

# --- VERÄ°TABANI ---
def setup_database():
    conn = sqlite3.connect(DB_PATH); cursor = conn.cursor()
    cursor.execute('CREATE TABLE IF NOT EXISTS reminders (id INTEGER PRIMARY KEY, user_id INTEGER, chat_id INTEGER, message TEXT NOT NULL, reminder_time TIMESTAMP, status TEXT DEFAULT "active")')
    conn.commit(); conn.close()

# --- GEMINI ARAÃ‡LARI (ALETLER) ---
def set_reminder(user_id: int, chat_id: int, time_string: str, message: str) -> str:
    """KullanÄ±cÄ± iÃ§in belirtilen zamanda bir hatÄ±rlatÄ±cÄ± kurar."""
    parsed_time = dateparser.parse(time_string, settings={'PREFER_DATES_FROM': 'future', 'TIMEZONE': 'Europe/Istanbul'})
    if not parsed_time: return "ZamanÄ± anlayamadÄ±m. 'yarÄ±n 15:30' gibi bir ifade kullan."

    reminder_time_utc = parsed_time.astimezone(pytz.utc)

    conn = sqlite3.connect(DB_PATH); cursor = conn.cursor()
    cursor.execute('INSERT INTO reminders (user_id, chat_id, message, reminder_time) VALUES (?, ?, ?, ?)', (user_id, chat_id, message, reminder_time_utc))
    conn.commit(); conn.close()

    formatted_time = parsed_time.strftime('%d %B %Y, Saat %H:%M')
    logger.info(f"HatÄ±rlatÄ±cÄ± kuruldu: {message} -> {formatted_time} (KullanÄ±cÄ±: {user_id})")
    return f"TamamdÄ±r, '{formatted_time}' iÃ§in '{message}' hatÄ±rlatÄ±cÄ±sÄ±nÄ± kurdum."

# --- GEMINI AYARLARI ---
genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel(model_name='gemini-1.5-flash-latest', tools=[set_reminder])
chat_sessions = {} # HafÄ±za iÃ§in

# --- TELEGRAM FONKSÄ°YONLARI ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("ğŸ¤– Merhaba! Ben senin kiÅŸisel asistanÄ±nÄ±m. Ne istediÄŸini sÃ¶ylemen yeterli.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id; chat_id = update.effective_chat.id; user_text = update.message.text
    if user_id not in chat_sessions: chat_sessions[user_id] = gemini_model.start_chat()
    chat = chat_sessions[user_id]

    try:
        await context.bot.send_chat_action(chat_id=chat_id, action=constants.ChatAction.TYPING)
        response = await chat.send_message_async(user_text)

        if response.candidates[0].content.parts[0].function_call:
            fc = response.candidates[0].content.parts[0].function_call
            if fc.name == "set_reminder":
                tool_args = {key: value for key, value in fc.args.items()}
                tool_args['user_id'] = user_id
                tool_args['chat_id'] = chat_id
                tool_response = set_reminder(**tool_args)

                # Gemini'ye aletin sonucunu gÃ¶nderip nihai cevabÄ± al
                response = await chat.send_message_async(
                    # DÃœZELTME: ArtÄ±k genai.Part kullanmÄ±yoruz
                    [genai.types.FunctionResponse(name=fc.name, response={'result': tool_response})]
                )

        await update.message.reply_text(response.text)
    except Exception as e:
        logger.error(f"Ä°ÅŸlem hatasÄ± (kullanÄ±cÄ±: {user_id}): {e}")
        await update.message.reply_text("ğŸ¤– ÃœzgÃ¼nÃ¼m, bir sorunla karÅŸÄ±laÅŸtÄ±m.")

async def check_reminders_job(context: ContextTypes.DEFAULT_TYPE):
    now_utc = datetime.now(pytz.utc)
    conn = sqlite3.connect(DB_PATH); cursor = conn.cursor()
    cursor.execute("SELECT id, chat_id, message FROM reminders WHERE status = 'active' AND reminder_time <= ?", (now_utc,))
    reminders = cursor.fetchall()
    for r_id, chat_id, message in reminders:
        try:
            await context.bot.send_message(chat_id=chat_id, text=f"ğŸ”” HATIRLATICI\n\n{message}")
            cursor.execute("UPDATE reminders SET status = 'sent' WHERE id = ?", (r_id,)); conn.commit()
            logger.info(f"HatÄ±rlatÄ±cÄ± gÃ¶nderildi: ID {r_id}")
        except Exception as e:
            logger.error(f"HatÄ±rlatÄ±cÄ± ID {r_id} gÃ¶nderilemedi: {e}")
    conn.close()

def main() -> None:
    setup_database()
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    job_queue = application.job_queue
    job_queue.run_repeating(check_reminders_job, interval=60, first=10)

    logger.info("Botun son kararlÄ± versiyonu baÅŸlatÄ±ldÄ±!")
    application.run_polling()

if __name__ == "__main__":
    main()
